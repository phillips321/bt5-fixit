#!/bin/bash
#__________________________________________________________
# Author:     phillips321 contact through phillips321.co.uk
# License:    CC BY-SA 3.0
# Use:        All in one pentest script designed for bt5
# Released:   www.phillips321.co.uk
  version=0.3
# Dependencies:
#	nmap
#	sslscan
#	gnome-web-photo
#	arp-scan
# debian users can apt-get install nmap sslscan gnome-web-photo arp-scan
#
# ToDo:
#	add ability to perform custom TCP scans
#	nikto
#	ldapminer: wine ldapminer.exe -d -h ${ip}
# ChangeLog:
#	v0.3 - comments on all functions
#	v0.2 - Caught ESC/Cancel signals to quit program
#	v0.1 - First write
#___________________________________________________________
f_setdefaults(){ #defaults for running the script
	NMAPTCP="nmap -sS -vv -d -A -Pn -n -r -oA"
	NMAPUDP="nmap -sU -vv -d -A -Pn -n -r -oA"
	NMAPTCPDEFAULT=0
	NMAPTCPALL=0
	NMAPUDPDEFAULT=0
	NMAPUDPALL=0
	RUNARPSCAN=0
	RUNNMAP=0
	RUNAMAP=0
	RUNSSLSCAN=0
	RUNGWP=0
	RUNSNMPSCAN=0
	RUNSNMPGET=0
	RUNNBTSCAN=0
	RUNNING=0
}
f_main(){ #this is the main bulk of the program that calls the scans
	dialog --title "What do you want to run" --separate-output --output-fd 2 --checklist "What do you want to run?" 0 0 0 \
		arpscan "run arp-scan to create targets.txt" on \
		nmap "nmap targets" off \
		amap "amap ports found using nmap" off \
		sslscan "sslscan targets" off \
		gwp "Take photo of web pages found?" off \
		snmpscans "Check for default SNMP community strings" off \
        snmpget "Get data from SNMP services using known strings" off \
        nbtscan "Run nbtscan against targets" on \
	2> /tmp/answer
	case $? in 1|255) : do ; f_exit ;; esac
	checklist=`cat /tmp/answer`
	for opt in ${checklist}
    do
		case ${opt} in
			arpscan) : do ; RUNARPSCAN=1 ;;
			nmap) : do ; RUNNMAP=1 ;;
			amap) : do ; RUNAMAP=1 ;;
			sslscan) : do ; RUNSSLSCAN=1 ;;
			gwp) : do ; RUNGWP=1 ;;
			snmpscans) : do ; RUNSNMPSCAN=1 ;;
			snmpget) : do ; RUNSNMPGET=1 ;;
			nbtscan) : do ; RUNNBTSCAN=1 ;;
		esac
	done
	dialog --title "Where would you like the output to go?" --dselect "`pwd`/output" 0 0 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; OUTPUTDIR=`cat /tmp/answer` ; f_directorycheck
	dialog --title "Threads" --inputbox "How many threads would you like to run?" 0 0 10 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; THREADS=`cat /tmp/answer`
	if [ ${RUNARPSCAN} = "1" ] ; then f_arpscan ; fi
	if [ ${RUNNMAP} = "1" ] ; then f_nmapoptions ; f_nmapscans ; fi
	if [ ${RUNAMAP} = "1" ] ; then f_amapscans ; fi
	if [ ${RUNSSLSCAN} = "1" ] ; then f_sslscans ; fi
	if [ ${RUNGWP} = "1" ] ; then f_gwp ; fi
	if [ ${RUNSNMPSCAN} = "1" ] ; then f_snmpscan ; fi
	if [ ${RUNSNMPGET} = "1" ] ; then f_snmpget ; fi
	if [ ${RUNNBTSCAN} = "1" ] ; then f_runnbtscan ; fi
}
f_debug(){ #this is debug information (insert f_debug in the script to pause)
	echo "checklist = ${checklist}"
	echo "NMAPTCPDEFAULT=${NMAPTCPDEFAULT}"
	echo "NMAPTCPALL=${NMAPTCPALL}"
	echo "NMAPUDPDEFAULT=${NMAPUDPDEFAULT}"
	echo "NMAPUDPALL=${NMAPUDPALL}"
	echo "Output directory = ${OUTPUTDIR}"
	echo "Number of threads = ${THREADS}"
	echo "RUNARPSCAN = ${RUNARPSCAN}"
	echo "RUNNMAP = ${RUNNMAP}"
	echo "RUNAMAP = ${RUNAMAP}"
	echo "RUNSSLSCAN = ${RUNSSLSCAN}"
	echo "RUNGWP = ${RUNGWP}"
	echo "RUNSNMPSCAN = ${RUNSNMPSCAN}"
	echo "RUNSNMPGET = ${RUNSNMPGET}"
	echo "RUNNBTSCAN = ${RUNNBTSCAN}"
	read -p "pause"
}
f_directorycheck(){ #creates dir if it's not present
	if [ -d ${OUTPUTDIR} ] ; then sleep 0 ; else mkdir ${OUTPUTDIR} ; fi
}
f_arpscan(){ #creates targets.txt and then allows editing
	if [ -s targets.txt ] 
	then
		dialog --title "ERROR:" --pause "targets.txt already exists. Please delete it from the working directory if you wish to create a new one using this script" 10 60 5 ; clear
	else
		dialog --title "ARPSCAN" --infobox "We are now scanning the local subnet for devices using arp-scan" 0 0
		arp-scan -l -g | grep . | cut -f1 | grep -v packets |grep -v Interface | grep -v Ending | grep -v Starting | sort -nb | uniq > `pwd`/targets.txt
	fi
	dialog --title "Please edit the targets.txt file" --editbox "`pwd`/targets.txt" 0 0 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac
	cp /tmp/answer `pwd`/targets.txt
	cp `pwd`/targets.txt ${OUTPUTDIR}/targets.txt
}
f_nmapoptions(){ #determins what typoe of nmap scans you want
	dialog --title "nmap options" --separate-output --output-fd 2 --checklist "What do you want to run" 0 0 0 \
		nmaptcpdefault "Run SYN scan against DEFAULT TCP ports?" on \
		nmaptcpall "Run SYN scan against ALL TCP ports?" off \
		nmapudpdefault "Run UDP scan against DEFAULT UDP ports?" on \
		nmapudpall "Run UDP scan against ALL UDP ports?" off \
		2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac
	result=`cat /tmp/answer` && rm /tmp/answer ; clear
	for opt in ${result}
	do
		case ${opt} in
			nmaptcpdefault) : do ; NMAPTCPDEFAULT=1  ;;
			nmaptcpall) : do ; NMAPTCPALL=1  ;;
			nmapudpdefault) : do ; NMAPUDPDEFAULT=1  ;;
			nmapudpall) : do ; NMAPUDPALL=1  ;;
		esac
	done
}
f_nmapscans(){ #nmap scans
	COUNT=0
	NUMBER=`cat targets.txt| wc -l`
	for i in `cat targets.txt`
	do
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress" 6 80
		TARGET=${i}
		LOC=${OUTPUTDIR}/${TARGET}
		if [ ${NMAPTCPDEFAULT} = "1" ] ; then xterm -title "${TARGET} small TCP" -e "${NMAPTCP} ${LOC}.small.tcp ${TARGET}" & fi
		if [ ${NMAPTCPALL} = "1" ] ; then xterm -title "${TARGET} big TCP" -e "${NMAPTCP} ${LOC}.big.tcp -p1-65535 ${TARGET}" & fi
		if [ ${NMAPUDPDEFAULT} = "1" ] ; then xterm -title "${TARGET} small UDP" -e "${NMAPUDP} ${LOC}.small.udp ${TARGET}" & fi
		if [ ${NMAPUDPALL} = "1" ] ; then xterm -title "${TARGET} big UDP" -e "${NMAPUDP} ${LOC}.big.udp ${TARGET}" & fi
		while [ `ps -Aef --cols 200 | grep ${OUTPUTDIR} | grep xterm | wc -l` -ge ${THREADS} ]
			do
			sleep 1
		done
		sleep 1
		((COUNT++))
	done
	while [ `ps -Aef --cols 200 | grep ${OUTPUTDIR} | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep ${OUTPUTDIR} | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress - No more left to start, number running = ${RUNNING}" 6 80
		sleep 1
	done
}
f_amapscans(){ #amap scans (of nmap output)
	cd "${OUTPUTDIR}"
	COUNT=0
	NUMBER=`ls *.gnmap | sed -e "s/.gnmap//" | wc -l`
	for i in `ls *.gnmap | sed -e "s/.gnmap//"`
	do
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress" 6 80
		xterm -title "${i} AMAP" -e "amap -i ${i}.gnmap -o ${i}.amap | tee -a amap_full.txt" &
		while [ `ps -Aef --cols 200 | grep AMAP | grep xterm | wc -l` -ge ${THREADS} ]
		do
			sleep 1
		done
		sleep 1
		((COUNT++))
	done
	while [ `ps -Aef --cols 200 | grep AMAP | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep AMAP | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "AMap Progress - No more left to start, number running = ${RUNNING}" 6 80
		sleep 1
	done
	cat amap_full.txt | cut -d" " -f3,4,5 | grep matches | sort -n | uniq > amap.txt
	cat amap.txt | grep http | cut -d"/" -f 1 | sort | uniq > amap.http.txt
	cat amap.txt | grep ssl | cut -d"/" -f 1 | sort | uniq > amap.ssl.txt
	cat amap.txt | grep snmp | cut -d"/" -f 1 | sort | uniq > amap.snmp.txt
	cd -
}
f_sslscans(){ #sslscans of ssl services (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress" 6 80
			SSLOUT="`echo "${i}" | sed -e s/:/_/g`" 
			xterm -title "${i} SSLSCAN" -e "sslscan --no-failed ${i} | tee ${SSLOUT}.sslscan.txt; sleep 5" &
			while [ `ps -Aef --cols 200 | grep SSLSCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				sleep 1
			done
		sleep 1
		((COUNT++))
		done
		while [ `ps -Aef --cols 200 | grep SSLSCAN | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 200 | grep SSLSCAN | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - No more left to start, number running = ${RUNNING}" 6 80
			sleep 1
		done
		cat *.sslscan.txt | grep "Testing\ SSL\|Accepted\|ERROR" | grep "SSLv2\|Testing\|\ 40\|\ 56" | grep -v "ERROR" > WeakCiphers.txt
	fi	
	cd -cat 
}
f_gwp(){ #takes photos of http(s) web site roots (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP-SSL Progress" 6 80
			HTTPOUT="`echo "${i}" | sed -e s/:/_/g`" 
			xterm -title "${i} GNOME-WEB-PHOTO" -e "gnome-web-photo -t 20 -w 1024 -m photo -f --format=png https://${i} ${HTTPOUT}_https.png" &
			while [ `ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l` -ge ${THREADS} ]
			do
				sleep 1
			done
			((COUNT++))
			sleep 1
		done
	fi
	if [ -s amap.http.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.http.txt | wc -l`
		for i in `cat amap.http.txt`
		do
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP-HTTP Progress" 6 80
			HTTPOUT="`echo "${i}" | sed -e s/:/_/g`" 
			xterm -title "${i} GNOME-WEB-PHOTO" -e "gnome-web-photo -m photo -f --format=png ${i} ${HTTPOUT}_http.png" &
			while [ `ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l` -ge ${THREADS} ]
			do
				sleep 1
			done
			sleep 1
			((COUNT++))
		done
	fi
	while [ `ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - No more left to start, number running = ${RUNNING}" 6 80
		sleep 1
	done
	sleep 1
	cd -
}
f_snmpscan(){ #checks for default community strings (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.snmp.txt ] 
	then
		COUNT=0
		NUMBER=`cat amap.snmp.txt | wc -l`
		for i in `cat amap.snmp.txt`
		do
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Scan Progress (onesixtyone)" 6 80
			ip=`echo ${i} | cut -f1 -d":"`
			xterm -title "${ip} SNMPSCAN" -e "/pentest/enumeration/snmp/onesixtyone/onesixtyone -c /pentest/enumeration/snmp/onesixtyone/dict.txt ${ip} | tee ${ip}.snmpscan.txt; sleep 5" &
			while [ `ps -Aef --cols 200 | grep SNMPSCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				sleep 1
			done
		sleep 1
		((COUNT++))
		done
		while [ `ps -Aef --cols 200 | grep SNMPSCAN | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 200 | grep SNMPSCAN | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Scan Progress - No more left to start, number running = ${RUNNING}" 6 80
			sleep 1
		done
	fi
	cat *.snmpscan.txt | grep -v Scanning > SNMPCommunityStrings.txt
	cd -
}
f_snmpget(){ #collects data from snmp services  (using snmpscan output)
	cd "${OUTPUTDIR}"
	if [ -s SNMPCommunityStrings.txt ] 
	then
		COUNT=0
		NUMBER=`cat SNMPCommunityStrings.txt | wc -l`
		for i in `cat SNMPCommunityStrings.txt | cut -f1,2 -d" " | sed -e "s/ //"`
		do
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Get Progress (snmpwalk)" 6 80
			ip=`echo $i | cut -f1 -d"["`
			string=`echo $i | cut -f2 -d"[" | sed -e "s/]//"`
			xterm -title "${ip} SNMPGET" -e "snmpwalk -v2c -c ${string} ${ip} | tee ${ip}.snmpget.txt; sleep 5" &
			while [ `ps -Aef --cols 200 | grep SNMPGET | grep xterm | wc -l` -ge ${THREADS} ]
			do
				sleep 1
			done
		sleep 1
		((COUNT++))
		done
		while [ `ps -Aef --cols 200 | grep SNMPGET | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 200 | grep SNMPGET | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Get Progress - No more left to start, number running = ${RUNNING}" 6 80
			sleep 1
		done
	fi
	cd -
}
f_runnbtscan(){ #nbtscan against targets
	cd "${OUTPUTDIR}"
	COUNT=0
	NUMBER=`cat targets.txt | wc -l`
	for i in `cat targets.txt`
	do
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NBTScan Progress" 6 80
		xterm -title "${i} NBTSCAN" -e "nbtscan -vh ${i} 
		
		
		| tee ${i}.nbtscan.txt; sleep 5" &
		while [ `ps -Aef --cols 200 | grep NBTSCAN | grep xterm | wc -l` -ge ${THREADS} ]
		do
			sleep 1
		done
	sleep 1
	((COUNT++))
	done
	while [ `ps -Aef --cols 200 | grep NBTSCAN | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep NBTSCAN | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NBTScan Progress - No more left to start, number running = ${RUNNING}" 6 80
		sleep 1
	done
	cd -
}
f_cleanup(){ #deletes files created that are empty or blank
	cd "${OUTPUTDIR}"
	for i in `ls *.png`
	do
		iSIZE=`stat -c %s ${i}`
		if [ ${iSIZE} -eq "469" ] ; then rm ${i} ; fi
	done
	if [ -s amap.ssl.txt ] ; then sleep 0 ; else rm amap.ssl.txt ; fi
	if [ -s amap.http.txt ] ; then sleep 0 ; else rm amap.http.txt ; fi
	if [ -s WeakCiphers.txt ] ; then sleep 0 ; else rm WeakCiphers.txt ; fi
	if [ -s SNMPCommunityStrings.txt ] ; then sleep 0 ; else rm SNMPCommunityStrings.txt ; fi
	cd -
}
f_displayresults(){ #displays output in xterm windows
	cd "${OUTPUTDIR}"
	cat *p.nmap | grep "scan\ report\ for\|Interesting\|open\|---------------------------------------------" | grep -v "OSScan" | grep -v "filtered" > open_ports.txt
	if [ -s open_ports.txt ] ; then xterm -title "OpenPorts from ${OUTPUTDIR}" -e "grep -E --color=always '.*(ssh|rdp|ssl|http|telnet|https|sslv2|mail|smtp|snmp|oracle|sql|tnls|ftp|sftp|echo|chargen|dns|qotd|motd|finger|rlogin|rexec|discard|daytime).*|' open_ports.txt | less -R" & fi
	if [ -s WeakCiphers.txt ] ; then xterm -title "WeakCiphers from ${OUTPUTDIR}" -e "less -R WeakCiphers.txt" & fi
	if [ -s SNMPCommunityStrings.txt ] ; then xterm -title "SNMPCommunityStrings from ${OUTPUTDIR}" -e "less -R SNMPCommunityStrings.txt" & fi
	cd -
	dialog --title "COMPLETED" --pause "Scanning has finished, now time to get root" 10 80 600 ; clear
}
f_exit(){ #this is called upon ESC/Cancel press
	dialog --title "Exiting" --pause "See ya" 10 40 2 ; clear
	exit 1
}
### What to run ###
f_setdefaults
f_main
f_cleanup
f_displayresults
#f_debug
exit 0
